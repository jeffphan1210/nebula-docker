version: '3.7'
services:
  reverse-proxy:
    image: traefik:v2.0
    # Enables the web UI and tells Traefik to listen to docker
    command: --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - /proxy/:/etc/traefik

  mongo:
    image: mongo
    restart: always
    environment:
      ## Ensure you change this before deploying
      MONGO_INITDB_ROOT_USERNAME: &db_user root
      MONGO_INITDB_ROOT_PASSWORD: &db_pass example
    ports:
      - 27117:27017

  message_queue:
    image: rabbitmq:3.7-alpine
    restart: always

  frontend:
    build:
      context: "frontend"
    environment:
      NODE_ENV: 'production'
      REACT_APP_API_LOCATION: "/api"
    depends_on:
      - reverse-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Path(`/`) || PathPrefix(`/static/`)


  web_service:
    build:
      context: "web"
      dockerfile: "Dockerfile"
    environment:
      WEB_CONCURRENCY: 2
      nebula_eve_MONGO_HOST: "mongo"
      nebula_eve_MONGO_USERNAME: *db_user
      nebula_eve_MONGO_PASSWORD: *db_pass
      nebula_eve_MONGO_AUTH_SOURCE: 'admin'
      nebula_eve_URL_PREFIX: "api"
      LOG_LEVEL: "debug"
    restart: "always"
    depends_on:
      - reverse-proxy
      - mongo
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api/`)


  node_1:
    build:
      context: "worker"
    command:  "python -m celery -A schedule worker --loglevel=DEBUG -Q nebula.express,nebula.import -n node_1"
    environment: &worker_env
      nebula.database.mongodb.username: *db_user
      nebula.database.mongodb.password: *db_pass
      nebula.database.mongodb.host: "mongo:27017"
      nebula.celery.broker_url:  "amqp://message_queue"
    depends_on: &worker_dep
      - mongo
      - message_queue
    restart: "always"

  node_2:
    command:  "python -m celery -A schedule worker --loglevel=DEBUG -Q nebula.express -n node_1"
    build:
      context: "worker"
      dockerfile: "Dockerfile"
    restart: "always"
    depends_on:
      *worker_dep
    environment:
      *worker_env

  node_scheduler:
    restart: "always"
    build:
      context: "worker"
    command: "celery beat -A schedule --loglevel=DEBUG --pidfile="
    depends_on:
      - mongo
      - message_queue

    environment:
      *worker_env